package kr.or.ddit.edDocument.controller;

import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.edDocument.service.DocumentService;
import kr.or.ddit.edDocument.vo.DocumentVO;
import kr.or.ddit.employee.vo.EmployeeVOWrapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Controller
@RequestMapping("ed/document/")
@Slf4j
public class DocumentRetrieveController { // 결재문서 목록 조회
	
	private final DocumentService service;
	
	/**
	 * 결재요청함
	 */
	@RequestMapping("documentReqList.do")
	public String documentReqList(
			Model model
			, Authentication authentication
			, @RequestParam(value = "empCd", required = false) String empCd
	){	
		// empCd에 로그인한 사용자 정보 담아주기 - 로그인한 사용자가 기안한 문서목록만 출력
		EmployeeVOWrapper empAuth= (EmployeeVOWrapper) authentication.getPrincipal();
		empCd = empAuth.getRealUser().getEmpCd();
		
		List<DocumentVO> documentReqList = service.retrieveRequestList(empCd);
		model.addAttribute("documentReqList", documentReqList);
		
		return "ed/document/documentReqList";
	}
	
	// 임시보관함
	@RequestMapping("documentKeepList.do")
	public String documentKeepList(Model model){
		return "ed/document/documentKeepList";
	}	
	
	// 결재대기함
	@RequestMapping("documentWaitList.do")
	public String documentWaitList(
			Model model
			, Authentication authentication
			, @RequestParam(value = "empCd", required = false) String empCd
	){
		// empCd에 로그인한 사용자 정보 담아주기
		EmployeeVOWrapper empAuth= (EmployeeVOWrapper) authentication.getPrincipal();
		empCd = empAuth.getRealUser().getEmpCd();
		
		List<DocumentVO> documentWaitList = service.retrieveWaitList(empCd);
		model.addAttribute("documentWaitList", documentWaitList);
		
		return "ed/document/documentWaitList";
	}
	
	// 결재진행함
	@RequestMapping("documentIngList.do")
	public String documentIngList(
			Model model
			, Authentication authentication
			, @RequestParam(value = "empCd", required = false) String empCd
	){
		// empCd에 로그인한 사용자 정보 담아주기
		EmployeeVOWrapper empAuth= (EmployeeVOWrapper) authentication.getPrincipal();
		empCd = empAuth.getRealUser().getEmpCd();
		
		List<DocumentVO> documentIngList = service.retrieveIngList(empCd);
		model.addAttribute("documentIngList", documentIngList);
		return "ed/document/documentIngList";
	}	
	
	/**
	 * 참조문서함 
	 */
	@RequestMapping("documentRefList.do") // who 정보가 필요 (다른 문서함도)
	public String  documentRefList(Model model){
		List<DocumentVO> documentRefList = service.retrieveRefList();
		model.addAttribute("documentRefList", documentRefList);
		return "ed/document/documentRefList";
	}	
	
	// 반려문서함
	@RequestMapping("documentReturnList.do")
	public String documentReturnList(Model model){
		return "ed/document/documentReturnList";
	}	
	
	// 수신함
	@RequestMapping("documentRegReceptionList.do")
	public String documentRegReceptionList(Model model){
		return "ed/document/documentRegReceptionList";
	}	
	
	/**
	 * 보관함, 로그인한 사용자 부서정보 필요
	 */
	@RequestMapping("documentRegPublicList.do")
	public String documentRegPublicList(
		Model model, Authentication authentication
	){
		String username= authentication.getName();
		EmployeeVOWrapper empAuth= (EmployeeVOWrapper) authentication.getPrincipal();
//		log.info("현재 인증된 사용자의 사원번호 : {}",empAuth.getRealUser().getEmpCd());
//		log.info("현재 인증된 사용자의 부서코드 : {}",empAuth.getRealUser().getDepCd());
		model.addAttribute("empAuth", empAuth);
		
		
		List<DocumentVO> documentRegPublicList = service.retrieveRegPublicList(empAuth.getRealUser().getDepCd());
		model.addAttribute("documentRegPublicList", documentRegPublicList);
		return "ed/document/documentRegPublicList";
	}		
	
}
