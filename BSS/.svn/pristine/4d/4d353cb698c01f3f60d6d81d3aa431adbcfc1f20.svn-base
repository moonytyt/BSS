<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!-- <!DOCTYPE html> -->
<!-- <html lang='en'> -->
<!-- <head> -->
<!-- <meta charset='utf-8' /> -->


<!-- / 마우스 포인트 -->
<script type="text/javascript">
// <![CDATA[
var colours=new Array('#f00', '#f06', '#f0f', '#f6f', '#f39', '#f9c'); // colours of the hearts
var minisize=1; // smallest size of hearts in pixels
var maxisize=5; // biggest size of hearts in pixels
var hearts=20; // maximum number of hearts on screen
var over_or_under="under"; // set to "over" for hearts to always be on top, or "under" to allow them to float behind other objects

/*****************************
*JavaScript Love Heart Cursor*
*  (c)2013+ mf2fm web-design *
*   http://www.mf2fm.com/rv  *
*  DON'T EDIT BELOW THIS BOX *
*****************************/
var x=ox=400;
var y=oy=300;
var swide=800;
var shigh=600;
var sleft=sdown=0;
var herz=new Array();
var herzx=new Array();
var herzy=new Array();
var herzs=new Array();
var kiss=false;

if (typeof('addRVLoadEvent')!='function') function addRVLoadEvent(funky) {
  var oldonload=window.onload;
  if (typeof(oldonload)!='function') window.onload=funky;
  else window.onload=function() {
    if (oldonload) oldonload();
    funky();
  }
}

addRVLoadEvent(mwah);

function mwah() { if (document.getElementById) {
  var i, heart;
  for (i=0; i<hearts; i++) {
    heart=createDiv("auto", "auto");
    heart.style.visibility="hidden";
	heart.style.zIndex=(over_or_under=="over")?"1001":"0";
    heart.style.color=colours[i%colours.length];
	heart.style.pointerEvents="none";
    if (navigator.appName=="Microsoft Internet Explorer") heart.style.filter="alpha(opacity=75)";
    else heart.style.opacity=0.75;
    heart.appendChild(document.createTextNode(String.fromCharCode(9829)));
    document.body.appendChild(heart);
    herz[i]=heart;
	herzy[i]=false;
  }
  set_scroll();
  set_width();
  herzle();
}}

function herzle() {
  var c;
  if (Math.abs(x-ox)>1 || Math.abs(y-oy)>1) {
    ox=x;
    oy=y;
    for (c=0; c<hearts; c++) if (herzy[c]===false) {
	  herz[c].firstChild.nodeValue=String.fromCharCode(9829);
      herz[c].style.left=(herzx[c]=x-minisize/2)+"px";
      herz[c].style.top=(herzy[c]=y-minisize)+"px";
      herz[c].style.fontSize=minisize+"px";
	  herz[c].style.fontWeight='normal';
      herz[c].style.visibility='visible';
      herzs[c]=minisize;
      break;
    }
  }
  for (c=0; c<hearts; c++) if (herzy[c]!==false) blow_me_a_kiss(c);
  setTimeout("herzle()", 40);
}

document.onmousedown=pucker;
document.onmouseup=function(){clearTimeout(kiss);};

function pucker() {
  ox=-1;
  oy=-1;
  kiss=setTimeout('pucker()', 100);
}

function blow_me_a_kiss(i) {
  herzy[i]-=herzs[i]/minisize+i%2;
  herzx[i]+=(i%5-2)/5;
  if (herzy[i]<sdown-herzs[i] || herzx[i]<sleft-herzs[i] || herzx[i]>sleft+swide-herzs[i]) {
    herz[i].style.visibility="hidden";
    herzy[i]=false;
  }
  else if (herzs[i]>minisize+2 && Math.random()<.5/hearts) break_my_heart(i);
  else {
    if (Math.random()<maxisize/herzy[i] && herzs[i]<maxisize) herz[i].style.fontSize=(++herzs[i])+"px";
    herz[i].style.top=herzy[i]+"px";
    herz[i].style.left=herzx[i]+"px";
  }
}

function break_my_heart(i) {
  var t;
  herz[i].firstChild.nodeValue=String.fromCharCode(9676);
  herz[i].style.fontWeight='bold';
  herzy[i]=false;
  for (t=herzs[i]; t<=maxisize; t++) setTimeout('herz['+i+'].style.fontSize="'+t+'px"', 60*(t-herzs[i]));
  setTimeout('herz['+i+'].style.visibility="hidden";', 60*(t-herzs[i]));
}

document.onmousemove=mouse;
function mouse(e) {
  if (e) {
    y=e.pageY;
    x=e.pageX;
  }
  else {
    set_scroll();
    y=event.y+sdown;
    x=event.x+sleft;
  }
}

window.onresize=set_width;
function set_width() {
  var sw_min=999999;
  var sh_min=999999;
  if (document.documentElement && document.documentElement.clientWidth) {
    if (document.documentElement.clientWidth>0) sw_min=document.documentElement.clientWidth;
    if (document.documentElement.clientHeight>0) sh_min=document.documentElement.clientHeight;
  }
  if (typeof(self.innerWidth)=='number' && self.innerWidth) {
    if (self.innerWidth>0 && self.innerWidth<sw_min) sw_min=self.innerWidth;
    if (self.innerHeight>0 && self.innerHeight<sh_min) sh_min=self.innerHeight;
  }
  if (document.body.clientWidth) {
    if (document.body.clientWidth>0 && document.body.clientWidth<sw_min) sw_min=document.body.clientWidth;
    if (document.body.clientHeight>0 && document.body.clientHeight<sh_min) sh_min=document.body.clientHeight;
  }
  if (sw_min==999999 || sh_min==999999) {
    sw_min=800;
    sh_min=600;
  }
  swide=sw_min;
  shigh=sh_min;
}

window.onscroll=set_scroll;
function set_scroll() {
  if (typeof(self.pageYOffset)=='number') {
    sdown=self.pageYOffset;
    sleft=self.pageXOffset;
  }
  else if (document.body && (document.body.scrollTop || document.body.scrollLeft)) {
    sdown=document.body.scrollTop;
    sleft=document.body.scrollLeft;
  }
  else if (document.documentElement && (document.documentElement.scrollTop || document.documentElement.scrollLeft)) {
    sleft=document.documentElement.scrollLeft;
    sdown=document.documentElement.scrollTop;
  }
  else {
    sdown=0;
    sleft=0;
  }
}

function createDiv(height, width) {
  var div=document.createElement("div");
  div.style.position="absolute";
  div.style.height=height;
  div.style.width=width;
  div.style.overflow="hidden";
  div.style.backgroundColor="transparent";
  return (div);
}
// ]]>
</script>
<!-- 마우스 포인트 -->

<script src='${pageContext.request.contextPath }/resources/js/calendar.min.js'></script>
<script>   
    var calendar; // FullCalendar 인스턴스를 저장하는데 사용될 이름이 지정된 변수를 선언.
    document.addEventListener('DOMContentLoaded', function() { //이 이벤트 리스너는 HTML 문서의 콘텐츠가 완전히 로드될 때 트리거됨. DOM이 준비되었을 때만 후속 코드가 실행되도록 함
    	let setting = {  // ajax 요청 설정
    		url : "${pageContext.request.contextPath }/calendar/personalcalendar",
    		method : "post",
    		data : "json",   // json형태로 받아와야함.
    		success : function(data) {
    			
    	console.log('data : ', data)
    	var calendarEl = document.getElementById('personalcalendar');
    	calendar = new FullCalendar.Calendar(calendarEl, {
    		
//     	height: 900,	 // 캘린더 높이 사이즈
    	aspectRatio: 2,  // 종횡비
//     	windowResize: function(arg) {
// 		    alert('The calendar has adjusted to a window resize. Current view: ' + arg.view.type);
// 		  },  // 웹 페이지의 창 크기가 조정될 때 발생하는 이벤트

// 		events: [
//    		 // my event data
//   		],
//   		eventColor: '#378006',

    	
    	
       	headerToolbar: {   // 헤더 기능
       	left: 'prevYear,prev,next,nextYear today',   // 헤더 좌측 기능
       	center: 'title',							 // 헤더 센터 제목 
       	right: 'multiMonthYear,dayGridMonth'		 // 헤더 우측 기능
       	},
       	 	editable: true, 			// 캘린더 편집 기능
       	 	eventLimit: true,
            droppable: true,  			// Fullcalendar옵션 : 드래그 요소
            displayEventTime : false,   // 이벤트 시간 표기 없앰
            selectable: true,   		// 달력 일자 드래그 설정가능
            selectHelper: false,
            nowIndicator: true, 		// 현재 시간 마크
            
            drop: function (arg) {
         if (document.getElementById('drop-remove').checked) {
             arg.draggedEl.parentNode.removeChild(arg.draggedEl);
            }
	         },
	         
    	// 클릭시 등록모달 창이 뜸
    	dateClick: function(info) {
    	const myModal = new bootstrap.Modal(document.getElementById('insertModal'), {
			backdrop: 'static',  // 모달 외부 클릭 시 닫히지 않도록 설정
			keyboard: false 	 // Esc 키를 눌러 모달이 닫히지 않도록 설정
		})
    	var eventstartdt = info.dateStr.split('T')[0];  // 시작 시간초기값
		var eventenddt = info.dateStr.split('T')[0];	// 끝나는 시간초기값
		
		document.getElementById('instartDate').value = eventstartdt; 
		document.getElementById('inendDate').value = eventenddt;
		
    	myModal.show('modal')
    	},
    	
		        
    	// 클릭시 수정모달 창이 뜸
    	eventClick: function(info) {
		const myModal = new bootstrap.Modal(document.getElementById('updateModal'), {
			backdrop: 'static',  // 모달 외부 클릭 시 닫히지 않도록 설정
			keyboard: false 	 // Esc 키를 눌러 모달이 닫히지 않도록 설정
		});
			console.log('info.event', info.event);
			var eventid = info.event.id;
			var eventtitle = info.event.title;
			var eventstartdt = info.event.startStr;
			var eventenddt = info.event.endStr;
			
			console.log('종료일자 : ',  eventenddt);
			
			document.getElementById('perScNo').value = eventid;
			document.getElementById('upperTitle').value = eventtitle;
    		document.getElementById('upstartDate').value = eventstartdt.split('T')[0];
    		document.getElementById('upendDate').value = eventenddt.split('T')[0];
    		
		myModal.show('modal');
        },
    		            	  
        // 날짜 초기값
    	initialDate: new Date(),
        businessHours: true,
       	events: data,
    	})
    	calendar.render();
    	},
    	
    	// 에러발생시 찍히는 현상.		
    	error : function(jqXHR, status, error) {
    	console.log(jqXHR)
    	console.log(status)
    	console.log(error)
    	}}
    	$.ajax(setting);
    	
    	// 등록모달 값
		$(insertModal).on('show.bs.modal',function(event){ 
		let $checkDdcCd = $("input:checked").parent('td').siblings('.perscno');
		if($checkDdcCd.length==1){
 			let $modalBody = $(this).find(".modal-body");
 			let perSCNO = $checkDdcCd.text();
			console.log(perscno);
 			
			$.ajax(setting);
 		}
     	});
    	
    	
		// 수정모달 값
		$(updateModal).on('show.bs.modal',function(event){
		let $checkDdcCd= $("input:checked").parent('td').siblings('.perscno');
		if($checkDdcCd.length==1){
 			let $modalBody = $(this).find(".modal-body");
 			let perSCNO = $checkDdcCd.text();
			console.log(perscno);
			
			$.ajax(setting);
 		}
		});  
    	
    	
    	// 등록모달 만들기
		$('#insertBtn').on('click', function(event) {
		//event.preventDefault();		// 이벤트의 기본동작을 중단시키는 역할
			// 이벤트 클릭시의 동작
			const eventstartdt = $(instartDate).val();  // 등록시작 이벤트
			const eventenddt = $(inendDate).val(); 		// 등록 끝나는 이벤트
			const eventpertt = $(inperTitle).val();		// 등록 제목 이벤트
			var formData = {
					perStart : eventstartdt, // 시작 이벤트
					perEnd : eventenddt,     // 끝나는 이벤트
					perTitle : eventpertt	 // 제목 이벤트
			};
			
			// 종료일 +1일 (안먹힘 08/31)
//             var clickedEventEndDate = info.event.endStr;
            // 종료일 변환 (안먹힘 08/31)
//             const enddateString = clickedEventEndDate.split('T')[0];
//             const date = new Date(enddateString);
//             const oneDayMilliseconds = 24 * 60 * 60 * 1000;
//             const previousDate = new Date(date.getTime() - oneDayMilliseconds);
            
			// controller에서 일정등록하는 부분.
			let setting = {
					url : `${pageContext.request.contextPath}/calendar/personalInsert.do`, 
					dataType : 'json',
					method : 'post',
					data : formData, 
					success : function(response) {  
						console.log(response) // 출력시 확인하는 부분 (newevent, success, message)
						$(insertModal).modal('hide');
		                   // 해당 일정만 다시 렌더링
	                   	if(response.success){  // response 안에 newevent, success, message 담겨있음.
		                	   if (response.newevent) {
		                		   var newevent = response.newevent
		                            var updatedEvent = calendar.getEventById(newevent.id);
		                            if (updatedEvent) {
		                                updatedEvent.setProp('title', newevent.title);
		                                updatedEvent.setStart(newevent.start);
		                                updatedEvent.setEnd(newevent.end);
		                                console.log(new Date(newevent.end))
		                            }else{
		                            	calendar.addEvent(newevent)
		                            }// if (updatedEvent) end
		                            alert("등록완료");
		                        } else {
		                            // 새로운 일정 추가 시
		                            calendar.refetchEvents();  // 캘린더에 정보가 추가되거나 변경되었을 때 해당 정보를 업데이트 하는 기능
		                        }// if (response.eventId) end
		                        
		            		   calendar.refetchEvents();  // 캘린더에 정보가 추가되거나 변경되었을 때 해당 정보를 업데이트 하는 기능
		            		   calendar.render();
		                   }else{
		                	   alert(response.message)
		                   }// if(response.success) end
					}// success end
			}//setting end
			$.ajax(setting);
			
			
	 	});
    	
		// 체크박스 상태에 따라  value 값 설정
// 		 if ($('#perTarget').is(':checked')) {
//             formData.append('perTarget',' ');
//         } else {
//             formData.append('perTarget',' ');
//         }
    	
    	
    	
		// 초록색 일정 = 공통일정 
        if (clickedEventColor = 'green') {  // 클릭 이벤트로 초록색 공통일정 지정.
             document.getElementById('perTarget').checked = true; // 체크시 일정이 초록색점이나 줄로 표시
         }else{
             document.getElementById('perTarget').checked = false; // 미체크시 파란색.
         }
		
		//  이벤트 모달 열기 
		$('#eventModal').modal('show');
        
      //모달 닫힐 때 입력 필드 값을 초기화
		$('#insertModal').on('hidden.bs.modal', function(){
		   $('#perScNo').val('');
		   $('#perStart').val('');
		   $('#perEnd').val('');
		   $('#perTitle').val('');
		   $('#perTarget').prop('checked', false);
		   console.log("calendar : ", calendar);
// 		   calendar.refetchEvents();  // 캘린더에 정보가 추가되거나 변경되었을 때 해당 정보를 업데이트 하는 기능
// 		   calendar.render();
		   location.reload(true); // 자동으로 새로고침(리로드)
		});
      
      	
        
		
		
		// 수정모달 버튼 만들기
		$('#updateBtn').on('click', function(event) {
	 	    event.preventDefault();		// 이벤트의 기본동작을 중단시키는 역할
			//이벤트 클릭시의 동작
			const eventstartdt = $(upstartDate).val();	// 수정 시작 이벤트
			const eventenddt = $(upendDate).val();		// 수정 끝나는 이벤트
			const eventpertt = $(upperTitles).val();	// 수정 제목 이벤트	
			const eventperscno = $(perScNo).val();		// 개인일정 코드번호 이벤트
			var formData = {
					perStart : eventstartdt, // 시작 이벤트
					perEnd : eventenddt,     // 끝나는 이벤트
					perTitle : eventpertt,	 // 제목 이벤트	
					perScNo : eventperscno	 // 개인일정 코드번호 이벤트
			}
			// controller에서 일정수정하는 부분.
			let setting = {
					url : `${pageContext.request.contextPath}/calendar/personalUpdate.do`,
					dataType : 'json',	// json 데이터로  타입을 지정함.
					method : 'post',	// HTTP헤더의 내용으로 보내는 방식으로 데이터 크기에 제한 없고, 헤더에 포함되어 보안이 뛰어남.
					data : formData,
					success : function(response) {
						console.log(response) // 출력시 확인하는 부분 (newevent, success, message)
						$(updateModal).modal('hide');
		                   // 해당 일정만 다시 렌더링
	                   	if(response.success){  // response 안에 newevent, success, message 담겨있음.
		                		   var personal = response.personal
		                            var updatedEvent = calendar.getEventById(personal.id);
		                            if (updatedEvent) {
		                                updatedEvent.setProp('title', personal.title);
		                                updatedEvent.setStart(personal.start);
		                                updatedEvent.setEnd(personal.end);
		                            } // if (updatedEvent) end
		                             alert("수정완료");
		                   }else{
		                	   alert(response.message)
		                   } //else end
					}// success end
			}//setting end
			$.ajax(setting);
	 	});
		
		
		// 삭제 버튼
		$('#deleteBtn').on('click',function(event){
			
// 			console.log('event => ', event);
			const eventperscno = $(perScNo).val();	// 개인 코드번호 이벤트  
			var formData = {
					perScNo : eventperscno	 // 개인일정 코드번호 이벤트 
			}
			let $checkPerScNo= $("input:checked").parent('td').siblings('.PerScNo');
			let allowCd=[];
			for(let i = 0;i<$checkPerScNo.length;i++){
				PerScNo.push($checkPerScNo[i].innerText);
			}
			let setting = {
				url : `${pageContext.request.contextPath}/calendar/personalDelete.do`,
				method : 'post',
				dataType : 'json',
				traditional: true,
				data : formData,
				success : function(resp) {
					if(resp.success){
						$("input:checked").parents('tr').remove();
						alert("삭제완료");
						var deleteEvent = calendar.getEventById(eventperscno);
                        if (deleteEvent) {
                            
                        	deleteEvent.remove();
                        	$(updateModal).modal('hide');
                        	
                        } // if (updatedEvent) end
					}else{
						alert("실행중 실패");
					}
				},
			}

			$.ajax(setting);
		})
     	})
     	
    </script>
</head>

<style>
   /* 월요일 색깔 */
   .fc-day-mon a {
     color: black;
     text-decoration: none;
   }
   /* 화요일 색깔 */
   .fc-day-tue a {
     color: black;  
     text-decoration: none;
   }
   /* 수요일 색깔 */
   .fc-day-wed a {
     color: black;
     text-decoration: none;
   }
   /* 목요일 색깔 */
   .fc-day-thu a {				
     color: black;
     text-decoration: none;
   }
   /* 금요일 색깔 */
   .fc-day-fri a {
     color: black;
     text-decoration: none;
   }
   /* 토요일 색깔 */
   .fc-day-sat a {
     color: blue;
     text-decoration: none;
   }
   /* 일요일 색깔 */
   .fc-day-sun a {
     color: red;
     text-decoration: none;
   }
   /* 투데이 색상 */
   .fc-day-today {
   	background: #adc8e6 !important; 
   }
</style>

<body>

<h5>☗ 공동서비스 ▸ 캘린더 ▸ 개인일정</h5>
<hr color="black">

<!-- 등록 모달 -->
<div class="modal fade" id="insertModal" tabindex="-1" role="dialog"  aria-labelledby="insertModal" aria-hidden="true">
   <div class="modal-dialog" role="document">
      <div class="modal-content">
         <div class="modal-header"><h3 class="modal-title" id="insertModalTitle">일정등록</h3></div>
         <div class="modal-body">
            <form id="insertForm">
<!--                <input type="hidden" id="inperScNo" name="perScNo"> -->
               <div class="form-group">
                  <label for="startDate">시작일</label> <input type="date" class="form-control" id="instartDate" name="startDate">
               </div>
               <div class="form-group">
                  <label for="endDate">종료일</label> <input type="date" class="form-control" id="inendDate" name="endDate">
               </div>
               <div class="form-group">
                  <label for="perTitle">일정명</label> <input type="text" class="form-control" id="inperTitle" name="perTitle">
               </div>
               <div class="form-group">
                  <label for="perTarget">공통일정</label> <input type="checkbox" id="perTarget" name="perTarget" value="">
               </div>
               <div class="modal-footer"></div>
               <button id="insertBtn" type="button" class="btn btn-primary">저장</button>
               <button type="button" class="btn btn-danger" data-bs-toggle="modal" >삭제</button>
               <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">닫기</button>	
               </form>
            </div>
         </div>
      </div>
   </div>
	
<!-- 수정 모달 -->
<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="updateModal" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header"><h3 class="modal-title" id="updateModalTitle">일정수정</h3></div>
			<div class="modal-body">
			<form id="updateForm">
               <input type="hidden" id="perScNo" name="perScNo">
               <div class="form-group">
                  <label for="startDate">시작일</label> <input type="date" class="form-control" id="upstartDate" name="startDate">
               </div>
               <div class="form-group">
                  <label for="endDate">종료일</label> <input type="date" class="form-control" id="upendDate" name="endDate">
               </div>
               <div class="form-group">
                  <label for="perTitle">일정명</label> <input type="text" class="form-control" id="upperTitle" name="perTitle">
               </div>
               <div class="form-group">
                  <label for="perTitle">일정수정명</label> <input type="text" class="form-control" id="upperTitles" name="perTitles">
               </div>
               <div class="form-group">
                  <label for="perTarget">공통일정</label> <input type="checkbox" id="perTarget" name="perTarget" value="">
               </div>
				<div class="modal-footer"></div>
				<button id="updateBtn" type="submit" class="btn btn-primary">수정</button>
				<button id="deleteBtn" type="button" class="btn btn-danger" >삭제</button>
	            <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">닫기</button>
	            </form>
	        </div>
		</div>
	</div>
</div>
	<div id='personalcalendar'></div>
</body>
</html>

