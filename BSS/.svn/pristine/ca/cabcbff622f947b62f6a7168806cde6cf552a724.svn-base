//package kr.or.ddit.edApproval.fancytree.controller;
//
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//import java.util.stream.Collectors;
//
//import javax.inject.Inject;
//
//import org.springframework.stereotype.Controller;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.ResponseBody;
//
//import kr.or.ddit.edApproval.dao.ApprovalDao;
//import kr.or.ddit.edApproval.fancytree.DepartmentFancyTreeNode;
//import kr.or.ddit.edApproval.fancytree.EmployeeFancyTreeNode;
//import kr.or.ddit.edApproval.fancytree.FancyTreeNode;
//import kr.or.ddit.edApproval.service.ApprovalService;
//import kr.or.ddit.employee.vo.EmployeeVO;
//
//@Controller
//@RequestMapping("/ed/approval/empfancytree.do")
//public class EmpFancyTreeController {
//
////    @Inject
//    private ApprovalDao approvalDao;
////	private ApprovalService approvalService;
//    
//    
////	@RequestMapping
//    @GetMapping
//	public String fancyTreeview() {
//		return "ed/approval/empFancyTree";
//	}
//    
////    @PostMapping
////    @ResponseBody
////    public List<FancyTreeNode<EmployeeVO>> fancyTree() {
////        List<EmployeeVO> empList = approvalDao.selectEmpList(); //  데이터 조회
////		return empList.stream()
////				.map(EmployeeFancyTreeNode::new)
////				.collect(Collectors.toList());
////    }
//    @PostMapping
//    @ResponseBody
//    public List<FancyTreeNode<EmployeeVO>> fancyTree(String departmentCode) {
//        List<EmployeeVO> empList = approvalDao.selectEmpList(); // 전체 직원 목록을 조회
//
//        Map<String, DepartmentFancyTreeNode> departmentNodeMap = new HashMap<>();
//
//        empList.forEach(emp -> {
//            String depCd = emp.getDepCd();
//            departmentNodeMap.computeIfAbsent(depCd, k -> new DepartmentFancyTreeNode(emp))
//                    .addChild(new EmployeeFancyTreeNode(emp));
//        });
//
//        return departmentNodeMap.values().stream()
//                .filter(node -> node.getData().getDepCd().equals(departmentCode))
//                .collect(Collectors.toList());
//    }
//
//}       
