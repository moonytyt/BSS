package kr.or.ddit.training.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.attendance.vo.AttendanceVO;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.employee.vo.EmployeeVOWrapper;
import kr.or.ddit.pagingVO.PaginationInfo;
import kr.or.ddit.training.service.TrainingApplyService;
import kr.or.ddit.training.vo.TrainingApplyVO;
import kr.or.ddit.training.vo.TrainingVO;
import kr.or.ddit.validate.groups.InsertGroup;
import kr.or.ddit.validate.groups.UpdateGroup;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequiredArgsConstructor
@Slf4j
public class TrainingApplyController {
	
	private final TrainingApplyService service;
	
	/**
	 * 교육 신청자 전체조회
	 * @return
	 */
	@GetMapping("/pm/training/trainingApply.do")
	public String trainingApplyList(
			@RequestParam(name = "page", required = false, defaultValue = "1") long currentPage
			, Model model		
	) {
		
		PaginationInfo<TrainingApplyVO> paging = new PaginationInfo<>(10, 5);
		paging.setCurrentPage(currentPage);
		
		List<TrainingApplyVO> trainAppList = service.retrievTrainApplyList(paging);
		paging.setDataList(trainAppList);
		model.addAttribute("paging", paging);
		
		return "pm/training/trainingApplyList";
	}
	
	/**
	 * 교육 신청자 검색조회
	 * @param currentPage
	 * @param model
	 * @return
	 */
	@ResponseBody
	@GetMapping(value="/pm/training/trainingApplySearchList", produces = MediaType.APPLICATION_JSON_VALUE)
	public Map<String, Object> trainingApplySearchList(
			@RequestParam(name = "page", required = false, defaultValue = "1") long currentPage
			, Model model
	) {
		PaginationInfo<TrainingApplyVO> paging = new PaginationInfo<>(10, 5);
	    paging.setCurrentPage(currentPage);

	    List<TrainingApplyVO> trainAppList = service.retrievTrainApplyList(paging);
	    paging.setDataList(trainAppList);

	    Map<String, Object> response = new HashMap<>();
	    response.put("trainAppList", trainAppList);
	    response.put("paging", paging);
		 
		return response;
	}
	
	
	/**
	 * 직원교육 신청하기
	 * 뷰에서 trainNo을 받아오고 컨트롤러에서 로그인한 직원 정보를 넘겨준다.
	 * @param trainApply
	 * @param errors
	 * @param authentication
	 * @param model
	 * @return
	 */
	@PostMapping("/pm/training/trainingApplyInsert.do")
	public String trainingApplyInsert(
			 @RequestParam(value = "empCd", required = false) String empCd
		    , @ModelAttribute("trainApply") TrainingApplyVO trainApply
		    , Errors errors
		    , Authentication authentication
		    , Model model
	) {
		
		EmployeeVOWrapper principal = (EmployeeVOWrapper) authentication.getPrincipal();
		EmployeeVO realUser = principal.getRealUser();
		trainApply.setEmpCd(realUser.getEmpCd());
		//model.addAttribute("trainApply",trainApply); // 넣으면 실패로 넘어감
		
		TrainingApplyVO haveTrain = service.retrieveHaveApply(trainApply);
		String viewName = null;
		
		if(haveTrain != null) { // 선택한 교육에 신청값이 있으면
			// model.addAttribute("message", "이미 신청하신 교육입니다.");
			// jsp에서 alert창
		}else { // 신청하지 않은 교육이면
			boolean success = service.createTrainApply(trainApply);
			if(success) {
				viewName = "redirect:/pm/training/trainingList"; // 나중에 메인-교육리스트로 변경해야함
			}else {
				// jsp에서 alert창
			}
		}
		return viewName;
	}

	
	/**
	 * 직원교육 신청취소 - 하는중
	 * @param trainApply
	 * @param errors
	 * @param model
	 * @return
	 */
	@PostMapping("/pm/training/trainingApplyDelete.do")
	public String trainingApplyDelete(
			 @RequestParam(value = "empCd", required = false) String empCd
			    , @ModelAttribute("trainApply") TrainingApplyVO trainApply
			    , Errors errors
			    , Authentication authentication
			    , Model model
	) {
			
		EmployeeVOWrapper principal = (EmployeeVOWrapper) authentication.getPrincipal();
		EmployeeVO realUser = principal.getRealUser();
		trainApply.setEmpCd(realUser.getEmpCd());
		//model.addAttribute("trainApply",trainApply); // 넣으면 실패로 넘어감
		
		TrainingApplyVO haveTrain = service.retrieveHaveApply(trainApply);
		String viewName = null;
		
		if(haveTrain == null) { // 선택한 교육에 신청값이 있으면
			// jsp에서 alert창
		}else { 				// 신청하지 않은 교육이면
			boolean success = service.removeTrainApply(trainApply); //삭제만들기
			if(success) {
				viewName = "redirect:/pm/training/trainingList"; // 나중에 메인-교육리스트로 변경해야함
			}else {
				// jsp에서 alert창
			}
		}
		return viewName;
	}
	
	// 교육 완료했을 때 update 필요
	
	// [메인 > 기타업무 > 교육신청] TrainingSelectController로 옮겼습니다! trainingListAppEmp 
	// etc/trainingApply.jsp → pm/training/trainingListApp.jsp
	
}
