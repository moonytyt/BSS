package kr.or.ddit.mail.service;

import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.inject.Inject;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMessage.RecipientType;
import javax.mail.internet.MimeMultipart;

import org.springframework.stereotype.Service;

import kr.or.ddit.mail.dao.MailBoxDAO;
import kr.or.ddit.mail.vo.MailBoxVO;
import kr.or.ddit.pagingVO.PaginationInfo;

@Service
public class MailBoxServiceImpl implements MailBoxService {
	@Inject
	private MailBoxDAO mailBoxDAO;

	@Override
	public String recieveMailList(String empId, PaginationInfo<MailBoxVO> paging) {
		String empMail = mailBoxDAO.selectMail(empId);
		String mailToken = mailBoxDAO.getMailToken(empId);

		String username = empMail;
		String password = mailToken;
		String host = "imap.gmail.com";
		int port = 993;

		Properties props = new Properties();

		props.put("mail.imaps.host", host);
		props.put("mail.imaps.port", port);
		props.put("mail.imaps.starttls.enable", true);

		Session session = Session.getDefaultInstance(props);

		try {
			Store store = session.getStore("imaps");
			store.connect(host, username, password);

			Folder folder = store.getFolder("INBOX");
			folder.open(Folder.READ_ONLY);

			Message[] messages = folder.getMessages();

			for (Message msg : messages) {
				MailBoxVO mailBox = new MailBoxVO();
				Date sentDate = msg.getSentDate();
				String subject = msg.getSubject();
				Object content = msg.getContent();
				String from = ((InternetAddress) msg.getFrom()[0]).toUnicodeString();

				mailBox.setReceiveMailReceiver(username);
				mailBox.setEmpCd(empId);
				mailBox.setReceiveMailSender(from);
				mailBox.setReceiveMailTitle(subject);
				mailBox.setReceiveMailContent((String) content);
				LocalDate localDate = sentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
				mailBox.setReceiveMailDate(localDate);

				mailBoxDAO.insertMail(mailBox);
			}
			folder.close(false);
			store.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "mail/allMail/allMailList";
	}

	@Override
	public boolean sendMail(MailBoxVO mail, String empCd) {
		String empMail = mailBoxDAO.selectMail(empCd);
		String mailToken = mailBoxDAO.getMailToken(empCd);

		String to = mail.getReceiveMailReceiver();
		String from = empMail;

		final String username = empMail;
		final String passwoard = mailToken;
		final String host = "smtp.gmail.com";

		Properties props = new Properties();

		props.put("mail.smtp.auth", true);
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.port", 587);
		props.put("mail.smtp.starttls.enable", true);
		props.put("mail.smtp.ssl.trust", host);

		Session session = Session.getInstance(props, new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, passwoard);
			}
		});

		try {
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(from));
			message.setRecipients(RecipientType.TO, InternetAddress.parse(to));
			message.setSubject("첨부 메일 전송 테스트");
			
			// Multipart를 구성할 Bodypart 객체로 실제 내용을 작성
			BodyPart textBodyPart = new MimeBodyPart();
			textBodyPart.setText("첨부파일 메시지 전송 테스트의 내용");
			
			// Multipart 객체를 생성하고, BodyPart를 실제 파트 요소로 설정
			Multipart multipart = new MimeMultipart();
			multipart.addBodyPart(textBodyPart);
			
			BodyPart fileBodyPart = new MimeBodyPart();
			String filePath = "첨부파일 이름을 포함한 경로";
			DataSource dataSource = new FileDataSource(filePath);
			DataHandler handler = new DataHandler(dataSource);
			fileBodyPart.setDataHandler(handler);
			fileBodyPart.setFileName(handler.getName());
			multipart.addBodyPart(fileBodyPart);
			
			// 메시지 Content 섲렁
			message.setContent(multipart);
			
			message.setSubject(mail.getReceiveMailTitle());
			message.setText(mail.getReceiveMailContent());
			
			// 메시지 전송
			Transport.send(message);

			mail.setEmpCd(empCd);
			mailBoxDAO.sendMail(mail);
		} catch (MessagingException e) {
			MessageFormat.format("{0} 해당 이메일 없음", to);
			return false;
		}

		return true;
	}

	@Override
	public List<MailBoxVO> allMail(String empCd) {
		return mailBoxDAO.selectAllMail(empCd);
	}

	@Override
	public List<MailBoxVO> retriveSendMailList(String empId) {
		String empMail = mailBoxDAO.selectMail(empId);
		return mailBoxDAO.selectSendMailList(empMail);
	}

	@Override
	public List<MailBoxVO> retriveGetMailList(String empCd, PaginationInfo<MailBoxVO> paging) {
		String empMail = mailBoxDAO.selectMail(empCd);
		return mailBoxDAO.selectReciveMailList(empMail);
	}

	@Override
	public MailBoxVO retriveMailDetail(String mailNo) {
		MailBoxVO mail = mailBoxDAO.selectMailDetail(mailNo);
		return mail;
	}

	@Override
	public List<MailBoxVO> tempMailList(String empMail) {
		return mailBoxDAO.selectTempMailList(empMail);
	}

	@Override
	public boolean temporaryMail(MailBoxVO mail, String empCd) {
		mail.setEmpCd(empCd);
		int cnt = mailBoxDAO.mailStorageInfo(mail);
		return cnt > 0;
	}
	
	@Override
	public void deleteTempMail(String mailNo) {
		mailBoxDAO.sendTempMail(mailNo);
	}

	@Override
	public List<MailBoxVO> toMeList(String empCd) {
		return mailBoxDAO.selectToMeList(empCd);
	}

	@Override
	public boolean deleteMail(MailBoxVO mailBox) {
		int cnt = mailBoxDAO.mailWaste(mailBox);
		return cnt > 0;
	}

	@Override
	public List<MailBoxVO> wasteMailList(MailBoxVO mailBox) {
		return mailBoxDAO.selectWasteMailList(mailBox);
	}

	@Override
	public void removeMail(MailBoxVO mailBox) {
		mailBoxDAO.deleteWasteMail(mailBox);
	}

	@Override
	public void restoreMail(MailBoxVO mailBox) {
		mailBoxDAO.restoreWasteMail(mailBox);
	}

	@Override
	public void impoMail(MailBoxVO mailBox) {
		
		mailBoxDAO.impoSetMail(mailBox);
	}

	@Override
	public List<MailBoxVO> impoMailList(String empMail) {
		return mailBoxDAO.selectImpoList(empMail);
	}

	@Override
	public String mailSenderEmpCd(String mailNo) {
		return mailBoxDAO.mailSenderEmpCd(mailNo);
	}
}