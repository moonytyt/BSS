package kr.or.ddit.edApproval.fancytree;

import kr.or.ddit.department.vo.DepartmentVO;
import kr.or.ddit.employee.vo.EmployeeVO;

public class DepartmentFancyTreeNode extends FancyTreeNodeAdapter<DepartmentVO> {

    public DepartmentFancyTreeNode(DepartmentVO data) {
        super(data);
    }

    @Override
    public String getTitle() {
        return getData().getDepName();
    }

    @Override
    public String getKey() {
        return getData().getDepCd();
    }

    @Override
    public boolean isFolder() {
        return true; // Department는 폴더 역할
    }
    
    @Override
    public boolean isLazy() {
        return isFolder(); // isLazy(): 지연로딩, 폴더 노드를 클릭할 때 필요한 데이터만 요청
    }
}
//package kr.or.ddit.edApproval.fancytree;
//
//import java.util.HashSet;
//import java.util.List;
//import java.util.Optional;
//import java.util.stream.Collectors;
//
//import kr.or.ddit.vo.BuyerVO;
//
//public class ABuyerFancyTreeNode extends FancyTreeNodeAdapter<BuyerVO> {
//
//	public ABuyerFancyTreeNode(BuyerVO data) {
//		super(data);
//	}
//
//	@Override
//	public String getTitle() {
//		return getData().getBuyerName();
//	}
//
//	@Override
//	public String getKey() {
//		return getData().getBuyerId();
//	}
//
//	@Override
//	public boolean isFolder() {
//		return getData().hasProds();
//	}
//
//	@Override
//	public boolean isLazy() {
//		return isFolder();
//	}
//	
//	@Override
//	public List<FancyTreeNode<?>> getChildren() {
//		return Optional.ofNullable(getData().getProdList())
//						.orElse(new HashSet<>())
//						.stream()
//						.map(AProdFancyTreeNode::new)
//						.collect(Collectors.toList());
//	}
//}
