package kr.or.ddit.finapi.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.finapi.dao.BankOptionDAO;
import kr.or.ddit.finapi.service.DepositService;
import kr.or.ddit.finapi.vo.BankOptionVO;
import kr.or.ddit.finapi.vo.DepositVO;
import kr.or.ddit.pagingVO.PaginationInfo;
import kr.or.ddit.pagingVO.SimpleCondition;

@Controller
@RequestMapping("/finApi/")
public class DepositController {

	@Inject
	private BankOptionDAO bankOptionDao;

	@Inject
	private DepositService depositService;

	@ModelAttribute("simpleCondition")
	public SimpleCondition setSimpleCondition() {
		return new SimpleCondition();
	}

	/**
	 * 정기예금 클릭시 폼 띄워주는 역할
	 * @param model
	 * @return
	 */
	@RequestMapping("regDeposit")
	public String regDeposit(Model model) {

		List<BankOptionVO> bankOptionList = bankOptionDao.selectBankOptionList();
		model.addAttribute("bankOptionList", bankOptionList);
		return "fin/prdt/regDeposit";
	}

	/**
	 * ajax를 이용하여 데이터를 불러오기 위함
	 * @param map
	 * @param model
	 * @return
	 */
	@PostMapping("depositList.do")
	public String depositList(
			@RequestBody HashMap<String, Object> map
			, Model model) {
		int currentPage = (int) map.get("page");
		long saveMoney = Long.parseLong((String)map.get("saveMoney")) ;
		PaginationInfo<DepositVO> paging = new PaginationInfo<>(10, 10);
		paging.setDetailCondition(map);
		paging.setCurrentPage(currentPage);
		SimpleCondition simpleCondition = new SimpleCondition();
		System.out.println(map.get("searchWord"));
		if(map.get("searchWord")!=null && map.get("searchWord")!="") {
			simpleCondition.setSearchType(map.get("searchType").toString());
			simpleCondition.setSearchWord(map.get("searchWord").toString());
		}
		paging.setSimpleCondition(simpleCondition);
		List<DepositVO> depositList = depositService.retrieveDepositList(paging);
		for(DepositVO deposit:depositList) {
			deposit.setSaveMoney(saveMoney);
		}
		paging.setDataList(depositList);
		model.addAttribute("paging", paging);
		return "fin/prdt/ajax/depositAjax";
	}
	
	@PostMapping("compareDepoist.do")
	public String compareDeposit(
			@RequestBody HashMap<String, Object> map
			,Model model
	) {
		List<String> arrFinPrdtCd = (List<String>) map.get("finPrdtCdList");
		List<String> intrRateTypeList = (List<String>) map.get("intrRateTypeList");
		long saveMoney = Long.parseLong((String) map.get("saveMoney"));
		List<DepositVO> depositList = new ArrayList<DepositVO>();
		for(int i = 0 ; i < arrFinPrdtCd.size();i++) {
			DepositVO deposit = new DepositVO();
			deposit.setFinPrdtCd(arrFinPrdtCd.get(i));
			deposit.setIntrRateType(intrRateTypeList.get(i));
			deposit = depositService.retrieveDeposit(deposit);
			deposit.setSaveMoney(saveMoney);
			depositList.add(deposit) ;
		}
		model.addAttribute("depositList", depositList);
		return "fin/prdt/ajax/compareDeposit";
	}

}
